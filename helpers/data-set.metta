!(import! &self utils)
;; (Cons (A True) (Cons (B False) (Cons (C True) Nil)))
;; (Cons (A True) (Cons (B False) (Cons (C True) Nil)))
;; (Cons (A True) (Cons (B False) (Cons (C True) Nil)))
;; (Cons (A True) (Cons (B False) (Cons (C True) Nil)))
;; (Cons (A True) (Cons (B False) (Cons (C True) Nil)))
;; (Cons (A True) (Cons (B False) (Cons (C True) Nil)))

;; (terminal x)
;; (junctor AND)
;; (junctor NOT)
;; (junctor OR)
;; (junctor junctor junctor)
;; (junctor terminal junctor)
;; (junctor junctor terminal)
;; (NOT terminal)
;; (junctor terminal terminal)

;; (= (generate-a-representation $value $space)
;;     (if (== $value terminal)
;;         x
;;         (collapse (match $space ($value $x)
;;            ($x (generate-a-representation $x $space))
;;         ))
;;     )
    
;; )
;; !(generate-a-representation junctor &self)
(junctor junctor)
(junctor OR)
(junctor AND)
(junctor NOT)
(AND terminal)
(OR terminal)
(NOT terminal)
(junctor terminal)
(terminal x)

(= (generate-a-representation $value $space $limit)
    (if (or (== terminal $value) (< $limit 1))
        terminal-val
        (collapse (match $space ($value $x)
            (if (or (== $x OR) (== $x AND))
                (reverse ($x (generate-a-representation $x $space (- $limit 1)) (generate-a-representation $x $space (- $limit 1))) ())
                (if (== $x NOT)
                    ($x terminal-val)
                    (reverse (generate-a-representation $x $space (- $limit 1)))
                )
            )
        ))

    )
)
!(generate-a-representation junctor &self 5)
